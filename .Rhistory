a <- 10 #example
a2 <- 100 #example
v <- sort(runif(1e7,0,1000));  #example
Rcpp::cppFunction('int min_index(NumericVector v, double a) {
NumericVector::iterator low=std::lower_bound (v.begin(), v.end(), a);
return (low - v.begin() + 1);
}')
Rcpp::cppFunction('int max_index(NumericVector v, double a) {
NumericVector::iterator up=std::upper_bound (v.begin(), v.end(), a);
return (up - v.begin());
}')
min(which(v>a))
min_index(v,a)
max(which(v<a2))
max_index(v,a2)
v <- sort(runif(1e7,0,1000));  #example
min(which(v>a))
min_index(v,a)
max(which(v<a2))
max_index(v,a2)
findInterval(a,v)
findInterval(a2,v)
min(which(v>a))
min_index(v,a)
findInterval(a,v)
max(which(v<a2))
max_index(v,a2)
findInterval(a2,v)
min(which(v>a))
min_index(v,a)
findInterval(a,v)
max(which(v<a2))
max_index(v,a2)
findInterval(a2,v)
findInterval(a,v, all.inside=TRUE)
min(which(v>=a))
min_index(v,a)
findInterval(a,v)
library(roxigen2)
library(roxygen2)
setwd("/home/fgischuu/git/REPPlab")
setwd("/home/fischuu/git/REPPlab")
roxygenise()
roxygenise()
?match.arg
library(REPPlab)
REPPlabAgg
library(REPPlab)
EPPlabAgg(x)
getwd()
setwd("/home/ejo138/Projects/fischuu.github.io/lectures/IntroductionToR")
titanic <- read.table("data/titanic3.csv", sep=",", header=TRUE)
stress <- read.table("data/stressEcho.csv", sep=",", header=TRUE)
head(titanic)
mean(titanic$age)
mean(titanic$age, na.rm=TRUE)
sum(titanic$survived)
head(stress)
min(stress$bhr)
max(stress$bhr)
range(stress$bhr)
sd(stress$age)
stress$basebp
stress$basebp>150
(stress$basebp[1:20]>150) & (stress$sex[1:20]=="male")
head(stress)
(stress$basebp[1:20]>150) && (stress$sex[1:20]=="male")
(stress$basebp[1:20]>150) & (stress$sex[1:20]=="male")
(stress$basebp[1:20]>150) & (stress$gender[1:20]=="male")
(stress$basebp[1:40]>150) & (stress$gender[1:40]=="male")
stress[(stress$basebp[1:40]>150) & (stress$gender[1:40]=="male") ,]
stress[which((stress$basebp[1:40]>150) & (stress$gender[1:40]=="male")) ,]
stress[(stress$basebp>150) & (stress$gender=="male"),]
stress[(stress$basebp>170) & (stress$gender=="male"),]
stress[(stress$basebp>190) & (stress$gender=="male"),]
titanic
head(titanic)
seq(from=10,1500,10)
titanic[seq(from=10,1500,10),]
titanic[seq(from=10,1300,10),]
nrow(titanic)
head(titanic)
titanic$survived[titanic$sex=="female",]
titanic$survived[titanic$sex=="female"]
sum(titanic$survived[titanic$sex=="female"])
sum(titanic$survived[titanic$sex=="male"])
head(stress)
stress$hxofCig[stress$gender=="male"]
head(stress)
head(titanic)
stress$age
stress$age>70
sum(stress$age>70)
seq(from=2, to=100, by=2)
stress$age
stress$age>70
sum(stress$age>70)
sum(titanic$survived[titanic$sex=="female"])
sum(titanic$survived[titanic$sex=="male"])
install.packages("MASS")
library("MASS")
summary(stress$age)
boxplot(stress$age)
head(stress)
plot(stress$bhr, stress$basebp)
plot(stress$bhr, stress$age)
plot(stress$bhr, stress$maxhr)
?boxplot
titanic$fare
summary(titanic$fare)
head(titanic)
plot(titanic$fare, titanic$age)
plot(titanic$fare, titanic$ticket)
plot(titanic$fare, as.numeric(titanic$ticket))
as.numeric(titanic$ticket)
titanic$ticket
plot(titanic$fare, titanic$age)
head(stress)
mean(stress$age)
t.test(stress$age, mu=65)
t.test(stress$age, mu=60)
t.test(stress$age, mu=50)
t.test(stress$age, mu=67)
t.test(stress$age, mu=65)
t.test(stress$age, mu=6)
t.test(stress$age, mu=65)
t.test(stress$age, mu=65)
head(titanic)
plot(titanic$age, titanic$survived)
titanic$age
table(titanic$age,titanic$survived)
library(roxygen2)
getwd()
roxygenise()
?switch
roxygenise()
library(REPPlab)
library(tourr)
data(olive)
olivePP.kurt.max <-
EPPlab(olive[,3:10],PPalg="PSO",PPindex="KurtosisMax",n.simu=10, maxiter=20)
EPPlab(olive[,3:10],PPalg="PSO",PPindex="KurtosisMax",n.simu=10, maxiter=200)
EPPlab(olive[,3:10],PPalg="PSO",PPindex="KurtosisMax",n.simu=10, maxiter=100)
olivePP.fried <-
EPPlab(olive[,3:10],PPalg="PSO",PPindex="KurtosisMax",n.simu=10, maxiter=20)
olivePP.fried <-
EPPlab(olive[,3:10],PPalg="PSO",PPindex="Friedman",n.simu=10, maxiter=20)
olivePPs <- list(olivePP.kurt.max, olivePP.fried)
EPPlabAgg(olivePP.kurt.max)$k
EPPlabAgg(olivePPs, "cum", 0.99)$k
pairs(olivePP.kurt.max %*% EPPlabAgg(olivePPs, "cum", 0.99)$O,
col=olive[,2], pch=olive[,1])
olivePP.kurt.max
EPPlabAgg(olivePPs, "cum", 0.99)$O
olivAOP.sq <- EPPlabAgg(olivePPs, "inv")
oliveProj <- olivePP.kurt.max$x %*% olivAOP.sq$O
plot(density(oliveProj))
rug(oliveProj[olive$region==1],col=1)
rug(oliveProj[olive$region==2],col=2)
rug(oliveProj[olive$region==3],col=3)
EPPlabAgg(olivePPs, "cum", 0.99)$k
EPPlabAgg()
EPPlabAgg
EPPlabAgg(olivePPs, "cumulat", 0.99)$k
EPPlabAgg(olivePPs, "inverse", 0.99)$
k
EPPlabAgg(olivePPs, "cumulat", 0.99)$k
EPPlabAgg(olivePPs, "inverse", 0.99)$k
EPPlabAgg(olivePPs, "sq.cumulat", 0.99)$k
EPPlabAgg(olivePPs, "sq", 0.99)$k
EPPlabAgg(olivePPs, "cumulat", 0.99)$k
EPPlabAgg(olivePPs, "inverse", 0.99)$k
EPPlabAgg(olivePPs, "sq", 0.99)$k
EPPlabAgg(olivePPs, "cumulat", 0.99)$k
EPPlabAgg(olivePPs, "inverse", 0.99)$k
EPPlabAgg(olivePPs, "sq", 0.99)$k
EPPlabAgg(olivePP.kurt.max)$k
EPPlabAgg(olivePP.kurt.max)$k
olivePP.kurt.max <-
EPPlab(olive[,3:10],PPalg="PSO",PPindex="KurtosisMax",n.simu=10, maxiter=20)
EPPlabAgg(olivePP.kurt.max)$k
olivePP.kurt.max <-
EPPlab(olive[,3:10],PPalg="PSO",PPindex="KurtosisMax",n.simu=10, maxiter=20)
EPPlabAgg(olivePP.kurt.max)$k
olivePP.kurt.max <-
EPPlab(olive[,3:10],PPalg="PSO",PPindex="KurtosisMax",n.simu=10, maxiter=20)
EPPlabAgg(olivePP.kurt.max)$k
olivePP.kurt.max <-
EPPlab(olive[,3:10],PPalg="PSO",PPindex="KurtosisMax",n.simu=10, maxiter=20)
EPPlabAgg(olivePP.kurt.max)$k
EPPlabAgg(olivePP.kurt.max)$k
data(olive)
olivePP.kurt.max <-
EPPlab(olive[,3:10],PPalg="PSO",PPindex="KurtosisMax",n.simu=10, maxiter=20)
EPPlabAgg(olivePP.kurt.max)$k
EPPlabAgg(olivePPs, "cumulat", 0.99)$k
EPPlabAgg(olivePPs, "inverse", 0.99)$k
EPPlabAgg(olivePPs, "sq", 0.99)$k
olivAOP.sq <- EPPlabAgg(olivePPs, "inv")
oliveProj <- olivePP.kurt.max$x %*% olivAOP.sq$O
plot(density(oliveProj))
rug(oliveProj[olive$region==1],col=1)
rug(oliveProj[olive$region==2],col=2)
rug(oliveProj[olive$region==3],col=3)
?tcrossprod
library(REPPlab)
library(tourr)
data(olive)
olivePP.kurt.max <-
EPPlab(olive[,3:10],PPalg="PSO",PPindex="KurtosisMax",n.simu=10, maxiter=20)
olivePP.fried <-
EPPlab(olive[,3:10],PPalg="PSO",PPindex="Friedman",n.simu=10, maxiter=20)
olivePPs <- list(olivePP.kurt.max, olivePP.fried)
EPPlabAgg(olivePP.kurt.max)$k
library(REPPlab)
library(tourr)
data(olive)
olivePP.kurt.max <-
EPPlab(olive[,3:10],PPalg="PSO",PPindex="KurtosisMax",n.simu=10, maxiter=20)
olivePP.fried <-
EPPlab(olive[,3:10],PPalg="PSO",PPindex="Friedman",n.simu=10, maxiter=20)
olivePPs <- list(olivePP.kurt.max, olivePP.fried)
EPPlabAgg(olivePP.kurt.max)$k
olivePP.kurt.max <-
EPPlab(olive[,3:10],PPalg="PSO",PPindex="KurtosisMax",n.simu=10, maxiter=20)
olivePPs <- list(olivePP.kurt.max, olivePP.fried)
EPPlabAgg(olivePP.kurt.max)$k
olivePP.kurt.max <-
EPPlab(olive[,3:10],PPalg="PSO",PPindex="KurtosisMax",n.simu=10, maxiter=20)
EPPlabAgg(olivePP.kurt.max)$k
olivePP.kurt.max <-
EPPlab(olive[,3:10],PPalg="PSO",PPindex="KurtosisMax",n.simu=10, maxiter=20)
EPPlabAgg(olivePP.kurt.max)$k
olivePP.kurt.max <-
EPPlab(olive[,3:10],PPalg="PSO",PPindex="KurtosisMax",n.simu=10, maxiter=20)
EPPlabAgg(olivePP.kurt.max)$k
olivePP.kurt.max <-
EPPlab(olive[,3:10],PPalg="PSO",PPindex="KurtosisMax",n.simu=10, maxiter=20)
EPPlabAgg(olivePP.kurt.max)$k
olivePP.kurt.max <-
EPPlab(olive[,3:10],PPalg="PSO",PPindex="KurtosisMax",n.simu=10, maxiter=20)
EPPlabAgg(olivePP.kurt.max)$k
olivePP.kurt.max <-
EPPlab(olive[,3:10],PPalg="PSO",PPindex="KurtosisMax",n.simu=10, maxiter=20)
EPPlabAgg(olivePP.kurt.max)$k
olivePP.kurt.max <-
EPPlab(olive[,3:10],PPalg="PSO",PPindex="KurtosisMax",n.simu=10, maxiter=20)
EPPlabAgg(olivePP.kurt.max)$k
x <- olivePP.kurt.max
B2P.output <-  list()
lresB2P <- list()
lresB2P.all <- c()
length(x)
i <- 1
B2P.output[[i]] <- apply(coef(x[[i]]),2 , B2P_fixed)
B2P_fixed <- function(x){tcrossprod(x)/sum(x^2)  }
B2P.output[[i]] <- apply(coef(x[[i]]),2 , B2P_fixed)
coef(x[[i]])
x
x[[i]]
x[[1]]
class(x[[1]])
class(x[[2]])
x[[2]]
x[[3]]
x
class(x)
if(class(x)=="epplab") x <- list(x)
length(x)
i <- 1
B2P.output[[i]] <- apply(coef(x[[i]]),2 , B2P_fixed)
B2P.output
lresB2P[[i]] <- tapply(B2P.output[[i]], gl(ncol(B2P.output[[i]]), nrow(B2P.output[[i]])), matrix, nrow=dim(x[[1]]$x)[2], ncol=dim(x[[1]]$x)[2])
lresB2P
lresB2P.all <- c(lresB2P.all, lresB2P[[i]])
lresB2P.all
res <- AOP(lresB2P.all, weights = method)
method="cumulative"
# Store the the averages, initialize with 0
avgMatrix <- matrix(0, nrow=dim(x[[1]]$x)[2], ncol=dim(x[[1]]$x)[2])
avgMatrix
# Now go through all directions
for(dirRun in 1:dim(x[[i]]$PPdir)[2]){
# Now sum them up
avgMatrix <- avgMatrix + tcrossprod(x[[i]]$PPdir[, dirRun])
}
avgMatrix
# Divide by the summands to get the average
avgMatrix <- avgMatrix / (dim(x[[i]]$PPdir)[2] * length(x))
avgMatrix
EPPlabAgg(olivePP.kurt.max)$k
EPPlabAgg(olivePPs, "cumulat", 0.99)$k
EPPlabAgg(olivePPs.kurt.max, "cumulat", 0.99)$k
EPPlabAgg(olivePP.kurt.max, "cumulat", 0.99)$k
EPPlabAgg(olivePP.kurt.max, "cumulat", 0.95)$k
avgMatrix
eigmave<-eigen(avgMatrix)
eigmave
lmave<-eigmave$values
lmave
umave<-eigmave$vectors
umave
takeThese <- 1:min(sum(((cumsum(lmave)/sum(lmave))<percentage))+1, length(lmave))
percentage=0.95
takeThese <- 1:min(sum(((cumsum(lmave)/sum(lmave))<percentage))+1, length(lmave))
takeThese
keepmave<-umave[,takeThese]
keepmave
coord <- x[[i]]$x %*% keepmave
coord
keepmave<-umave[,takeThese,drop=FALSE]
keepmave
coord <- x[[i]]$x %*% keepmave
coord
res <- list(P=O2P(umave), O=keepmave, k= ncol(keepmave), eigen=lmave)
res
keepmave<-umave[,takeThese,]#,drop=FALSE]
# project the data on the directions we keep
keepmave<-umave[,takeThese]#,drop=FALSE]
# project the data on the directions we keep
coord <- x[[i]]$x %*% keepmave
# Write out the results
res <- list(P=O2P(umave), O=keepmave, k= ncol(keepmave), eigen=lmave)
res
keepmave<-umave[,takeThese,drop=FALSE]
# project the data on the directions we keep
coord <- x[[i]]$x %*% keepmave
# Write out the results
res <- list(P=O2P(umave), O=keepmave, k= ncol(keepmave), eigen=lmave)
res
library(REPPlab)
library(tourr)
library(REPPlab)
data(olive)
olivePP.kurt.max <-
EPPlab(olive[,3:10],PPalg="PSO",PPindex="KurtosisMax",n.simu=10, maxiter=20)
olivePP.fried <-
EPPlab(olive[,3:10],PPalg="PSO",PPindex="Friedman",n.simu=10, maxiter=20)
olivePPs <- list(olivePP.kurt.max, olivePP.fried)
EPPlabAgg(olivePP.kurt.max)$k
library(REPPlab)
olivePP.kurt.max <-
EPPlab(olive[,3:10],PPalg="PSO",PPindex="KurtosisMax",n.simu=10, maxiter=20)
EPPlabAgg(olivePP.kurt.max)$k
olivePP.kurt.max <-
EPPlab(olive[,3:10],PPalg="PSO",PPindex="KurtosisMax",n.simu=10, maxiter=20)
EPPlabAgg(olivePP.kurt.max)$k
olivePP.kurt.max <-
EPPlab(olive[,3:10],PPalg="PSO",PPindex="KurtosisMax",n.simu=10, maxiter=20)
EPPlabAgg(olivePP.kurt.max)$k
olivePP.kurt.max <-
EPPlab(olive[,3:10],PPalg="PSO",PPindex="KurtosisMax",n.simu=10, maxiter=20)
EPPlabAgg(olivePP.kurt.max)$k
olivePP.kurt.max <-
EPPlab(olive[,3:10],PPalg="PSO",PPindex="KurtosisMax",n.simu=10, maxiter=20)
EPPlabAgg(olivePP.kurt.max)$k
olivePP.kurt.max <-
EPPlab(olive[,3:10],PPalg="PSO",PPindex="KurtosisMax",n.simu=10, maxiter=20)
EPPlabAgg(olivePP.kurt.max)$k
olivePP.kurt.max <-
EPPlab(olive[,3:10],PPalg="PSO",PPindex="KurtosisMax",n.simu=10, maxiter=20)
EPPlabAgg(olivePP.kurt.max)$k
olivePP.kurt.max <-
EPPlab(olive[,3:10],PPalg="PSO",PPindex="KurtosisMax",n.simu=10, maxiter=20)
EPPlabAgg(olivePP.kurt.max)$k
pairs(olivePP.kurt.max %*% EPPlabAgg(olivePPs, "cum", 0.99)$O,
col=olive[,2], pch=olive[,1])
olivePP.kurt.max
pairs(olivePP.kurt.max$x %*% EPPlabAgg(olivePPs, "cum", 0.99)$O,
col=olive[,2], pch=olive[,1])
library(REPPlab)
roxygenise()
library(REPPlab)
load(url("http://pages.stat.wisc.edu/~karlrohe/netsci/data/madStuff.RData"))
iplot(madStuff[,1], madStuff[,2])
install.packages(""iplots)
install.packages("iplots")
iplot(madStuff[,1], madStuff[,2])
library(iplots)
iplot(madStuff[,1], madStuff[,2])
ibar(madStuff[,8])
sort(table(madStuff[,8]))
ibar(madStuff[,3])
table(madStuff[,4])
nas = which(madStuff[,4] =="")
madStuff[nas,4] = "NA"
ibar(madStuff[,4])
sort(table(madStuff[,8]))
ibar(madStuff[,3])
library(roxygen2)
getwd()
roxygenise()
library(REPPlab)
roxygenise()
roxygenise()
roxygenise()
roxygenise()
roxygenise()
library(REPPlab)
library(roxygen2)
roxygenise()
library(roxygen2)
roxygenise()
